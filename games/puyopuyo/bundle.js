/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/board.ts":
/*!**********************!*\
  !*** ./src/board.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Board: () => (/* binding */ Board)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"./src/types.ts\");\n\nvar Board = /** @class */ (function () {\n    function Board(config) {\n        this.config = config;\n        this.board = Array(config.boardHeight)\n            .fill(null)\n            .map(function () { return Array(config.boardWidth).fill(_types__WEBPACK_IMPORTED_MODULE_0__.PuyoColor.None); });\n    }\n    // ボードの状態を取得\n    Board.prototype.getBoard = function () {\n        return this.board;\n    };\n    // ボードの特定の位置のぷよを取得\n    Board.prototype.getPuyo = function (x, y) {\n        if (this.isValidPosition(x, y)) {\n            return this.board[y][x];\n        }\n        return _types__WEBPACK_IMPORTED_MODULE_0__.PuyoColor.None;\n    };\n    // ボードの特定の位置にぷよを設置\n    Board.prototype.setPuyo = function (x, y, color) {\n        if (this.isValidPosition(x, y)) {\n            this.board[y][x] = color;\n            return true;\n        }\n        return false;\n    };\n    // 位置が有効かどうかを確認\n    Board.prototype.isValidPosition = function (x, y) {\n        return (x >= 0 &&\n            x < this.config.boardWidth &&\n            y >= 0 &&\n            y < this.config.boardHeight);\n    };\n    // 指定した位置が空いているかどうかを確認\n    Board.prototype.isPositionEmpty = function (x, y) {\n        return this.isValidPosition(x, y) && this.board[y][x] === _types__WEBPACK_IMPORTED_MODULE_0__.PuyoColor.None;\n    };\n    // ぷよを落下させる\n    Board.prototype.applyGravity = function () {\n        var moved = false;\n        for (var x = 0; x < this.config.boardWidth; x++) {\n            for (var y = this.config.boardHeight - 2; y >= 0; y--) {\n                if (this.board[y][x] !== _types__WEBPACK_IMPORTED_MODULE_0__.PuyoColor.None && this.board[y + 1][x] === _types__WEBPACK_IMPORTED_MODULE_0__.PuyoColor.None) {\n                    this.board[y + 1][x] = this.board[y][x];\n                    this.board[y][x] = _types__WEBPACK_IMPORTED_MODULE_0__.PuyoColor.None;\n                    moved = true;\n                }\n            }\n        }\n        return moved;\n    };\n    // 連結したぷよを消去し、スコアを計算\n    Board.prototype.checkAndClearMatches = function () {\n        var _this = this;\n        var visited = Array(this.config.boardHeight)\n            .fill(null)\n            .map(function () { return Array(_this.config.boardWidth).fill(false); });\n        var totalCleared = 0;\n        for (var y = 0; y < this.config.boardHeight; y++) {\n            for (var x = 0; x < this.config.boardWidth; x++) {\n                if (this.board[y][x] !== _types__WEBPACK_IMPORTED_MODULE_0__.PuyoColor.None && !visited[y][x]) {\n                    var color = this.board[y][x];\n                    var connectedPuyos = [];\n                    // 深さ優先探索で連結したぷよを探索\n                    this.findConnectedPuyos(x, y, color, visited, connectedPuyos);\n                    // 4つ以上連結していれば消去\n                    if (connectedPuyos.length >= 4) {\n                        connectedPuyos.forEach(function (pos) {\n                            _this.board[pos.y][pos.x] = _types__WEBPACK_IMPORTED_MODULE_0__.PuyoColor.None;\n                        });\n                        // 消去したぷよの数に応じてスコアを加算\n                        totalCleared += connectedPuyos.length;\n                    }\n                }\n            }\n        }\n        // 消去したぷよの数の2乗をスコアとして返す\n        return totalCleared > 0 ? totalCleared * totalCleared * 10 : 0;\n    };\n    // 連結したぷよを探索（深さ優先探索）\n    Board.prototype.findConnectedPuyos = function (x, y, color, visited, result) {\n        if (!this.isValidPosition(x, y) ||\n            visited[y][x] ||\n            this.board[y][x] !== color) {\n            return;\n        }\n        visited[y][x] = true;\n        result.push({ x: x, y: y });\n        // 上下左右を探索\n        this.findConnectedPuyos(x + 1, y, color, visited, result);\n        this.findConnectedPuyos(x - 1, y, color, visited, result);\n        this.findConnectedPuyos(x, y + 1, color, visited, result);\n        this.findConnectedPuyos(x, y - 1, color, visited, result);\n    };\n    // ボードをリセット\n    Board.prototype.reset = function () {\n        var _this = this;\n        this.board = Array(this.config.boardHeight)\n            .fill(null)\n            .map(function () { return Array(_this.config.boardWidth).fill(_types__WEBPACK_IMPORTED_MODULE_0__.PuyoColor.None); });\n    };\n    // ゲームオーバーかどうかを確認（一番上の行にぷよがあるかどうか）\n    Board.prototype.isGameOver = function () {\n        for (var x = 0; x < this.config.boardWidth; x++) {\n            if (this.board[0][x] !== _types__WEBPACK_IMPORTED_MODULE_0__.PuyoColor.None) {\n                return true;\n            }\n        }\n        return false;\n    };\n    return Board;\n}());\n\n\n\n//# sourceURL=webpack://puyo-puyo-ts/./src/board.ts?");

/***/ }),

/***/ "./src/game.ts":
/*!*********************!*\
  !*** ./src/game.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Game: () => (/* binding */ Game)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"./src/types.ts\");\n/* harmony import */ var _board__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./board */ \"./src/board.ts\");\n/* harmony import */ var _puyoGroup__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./puyoGroup */ \"./src/puyoGroup.ts\");\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./renderer */ \"./src/renderer.ts\");\n/* harmony import */ var _inputHandler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./inputHandler */ \"./src/inputHandler.ts\");\n\n\n\n\n\nvar Game = /** @class */ (function () {\n    function Game(canvas) {\n        this.lastUpdateTime = 0;\n        this.accumulatedTime = 0;\n        this.gameLoopId = null;\n        // ゲーム設定\n        this.config = {\n            boardWidth: 6,\n            boardHeight: 12,\n            puyoSize: 40,\n            fallSpeed: 500 // ミリ秒ごとに1マス落下\n        };\n        // ボードの初期化\n        this.board = new _board__WEBPACK_IMPORTED_MODULE_1__.Board(this.config);\n        // ぷよグループマネージャーの初期化\n        this.puyoGroupManager = new _puyoGroup__WEBPACK_IMPORTED_MODULE_2__.PuyoGroupManager(this.config);\n        // 入力ハンドラーの初期化\n        this.inputHandler = new _inputHandler__WEBPACK_IMPORTED_MODULE_4__.InputHandler();\n        // レンダラーの初期化\n        this.renderer = new _renderer__WEBPACK_IMPORTED_MODULE_3__.Renderer(canvas, this.config);\n        // ゲーム状態の初期化\n        this.state = {\n            board: this.board.getBoard(),\n            currentGroup: null,\n            nextGroup: null,\n            score: 0,\n            gameOver: false\n        };\n        // ゲームの初期化\n        this.init();\n    }\n    // ゲームの初期化\n    Game.prototype.init = function () {\n        // ボードをリセット\n        this.board.reset();\n        // 最初のぷよグループを生成\n        this.state.currentGroup = this.puyoGroupManager.createPuyoGroup();\n        this.state.nextGroup = this.puyoGroupManager.createPuyoGroup();\n        // スコアをリセット\n        this.state.score = 0;\n        // ゲームオーバーフラグをリセット\n        this.state.gameOver = false;\n        // 入力状態をリセット\n        this.inputHandler.reset();\n        // 時間をリセット\n        this.lastUpdateTime = performance.now();\n        this.accumulatedTime = 0;\n    };\n    // ゲームを開始\n    Game.prototype.start = function () {\n        var _this = this;\n        if (this.gameLoopId === null) {\n            this.lastUpdateTime = performance.now();\n            this.gameLoopId = requestAnimationFrame(function () { return _this.gameLoop(); });\n        }\n    };\n    // ゲームを停止\n    Game.prototype.stop = function () {\n        if (this.gameLoopId !== null) {\n            cancelAnimationFrame(this.gameLoopId);\n            this.gameLoopId = null;\n        }\n    };\n    // ゲームをリスタート\n    Game.prototype.restart = function () {\n        this.stop();\n        this.init();\n        this.start();\n    };\n    // ゲームループ\n    Game.prototype.gameLoop = function () {\n        var _this = this;\n        var currentTime = performance.now();\n        var deltaTime = currentTime - this.lastUpdateTime;\n        this.lastUpdateTime = currentTime;\n        // 時間を蓄積\n        this.accumulatedTime += deltaTime;\n        // 入力処理\n        this.handleInput();\n        // 更新処理（一定時間ごと）\n        while (this.accumulatedTime >= this.config.fallSpeed) {\n            this.update();\n            this.accumulatedTime -= this.config.fallSpeed;\n        }\n        // 描画処理\n        this.render();\n        // ゲームオーバー時の処理\n        if (this.state.gameOver) {\n            console.log('Game Over');\n            if (this.inputHandler.isSpaceTriggered()) {\n                console.log('Game Over');\n                this.restart();\n            }\n        }\n        // 次のフレームを要求\n        this.gameLoopId = requestAnimationFrame(function () { return _this.gameLoop(); });\n    };\n    // 入力処理\n    Game.prototype.handleInput = function () {\n        if (this.state.gameOver || !this.state.currentGroup) {\n            return;\n        }\n        // 左移動\n        if (this.inputHandler.isActionTriggered(_types__WEBPACK_IMPORTED_MODULE_0__.KeyAction.Left)) {\n            this.puyoGroupManager.moveLeft(this.state.currentGroup, this.board);\n        }\n        // 右移動\n        if (this.inputHandler.isActionTriggered(_types__WEBPACK_IMPORTED_MODULE_0__.KeyAction.Right)) {\n            this.puyoGroupManager.moveRight(this.state.currentGroup, this.board);\n        }\n        // 下移動（高速落下）\n        if (this.inputHandler.isActionPressed(_types__WEBPACK_IMPORTED_MODULE_0__.KeyAction.Down)) {\n            this.accumulatedTime += this.config.fallSpeed / 2; // 落下速度を上げる\n        }\n        // 回転（キーを押したときに一度だけ発生し、キーを離すまで再度発生しない）\n        if (this.inputHandler.isActionTriggeredOnce(_types__WEBPACK_IMPORTED_MODULE_0__.KeyAction.Rotate)) {\n            this.puyoGroupManager.rotate(this.state.currentGroup, this.board);\n        }\n    };\n    // 更新処理\n    Game.prototype.update = function () {\n        if (this.state.gameOver) {\n            return;\n        }\n        // 現在のぷよグループがない場合、新しいぷよグループを生成\n        if (!this.state.currentGroup) {\n            this.state.currentGroup = this.state.nextGroup;\n            this.state.nextGroup = this.puyoGroupManager.createPuyoGroup();\n            // 新しいぷよグループが配置できない場合、ゲームオーバー\n            if (!this.puyoGroupManager.canPlacePuyoGroup(this.state.currentGroup, this.board)) {\n                this.state.gameOver = true;\n                return;\n            }\n        }\n        // 現在のぷよグループを下に移動\n        var moved = this.puyoGroupManager.moveDown(this.state.currentGroup, this.board);\n        // 移動できなかった場合、ぷよグループをボードに固定\n        if (!moved) {\n            this.puyoGroupManager.placePuyoGroupOnBoard(this.state.currentGroup, this.board);\n            this.state.currentGroup = null;\n            // 連鎖処理\n            this.processChain();\n        }\n    };\n    // 連鎖処理\n    Game.prototype.processChain = function () {\n        var chainCount = 0;\n        var totalScore = 0;\n        // 重力を適用\n        while (this.board.applyGravity()) {\n            // 重力が適用された場合、再度適用（ぷよが落ち切るまで）\n        }\n        // 連鎖が続く限り処理を繰り返す\n        var score;\n        do {\n            // マッチしたぷよを消去し、スコアを計算\n            score = this.board.checkAndClearMatches();\n            if (score > 0) {\n                chainCount++;\n                // 連鎖ボーナスを適用（連鎖数に応じてスコアを増加）\n                var chainBonus = chainCount * 50;\n                totalScore += score + chainBonus;\n                // 重力を適用\n                while (this.board.applyGravity()) {\n                    // 重力が適用された場合、再度適用（ぷよが落ち切るまで）\n                }\n            }\n        } while (score > 0);\n        // 総スコアを加算\n        this.state.score += totalScore;\n    };\n    // 描画処理\n    Game.prototype.render = function () {\n        // ゲーム状態を更新\n        this.state.board = this.board.getBoard();\n        // レンダラーを使用して描画\n        this.renderer.render(this.state);\n    };\n    return Game;\n}());\n\n\n\n//# sourceURL=webpack://puyo-puyo-ts/./src/game.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game */ \"./src/game.ts\");\n\n// DOMが読み込まれたら実行\ndocument.addEventListener('DOMContentLoaded', function () {\n    // canvasを取得\n    var canvas = document.getElementById('gameCanvas');\n    if (!canvas) {\n        console.error('Canvas element not found!');\n        return;\n    }\n    // ゲームを初期化\n    var game = new _game__WEBPACK_IMPORTED_MODULE_0__.Game(canvas);\n    // ゲームを開始\n    game.start();\n    console.log('ぷよぷよゲームが開始されました！');\n    console.log('操作方法:');\n    console.log('- 左右矢印キー: ぷよを左右に移動');\n    console.log('- 下矢印キー: ぷよを早く落とす');\n    console.log('- 上矢印キー/Zキー/Xキー: ぷよを回転');\n    console.log('- スペースキー: ゲームオーバー時にリスタート');\n});\n\n\n//# sourceURL=webpack://puyo-puyo-ts/./src/index.ts?");

/***/ }),

/***/ "./src/inputHandler.ts":
/*!*****************************!*\
  !*** ./src/inputHandler.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InputHandler: () => (/* binding */ InputHandler)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"./src/types.ts\");\n\nvar InputHandler = /** @class */ (function () {\n    function InputHandler() {\n        var _this = this;\n        this.keyState = {};\n        this.keyActions = {};\n        this.lastKeyPressTime = {};\n        this.keyReleased = {}; // キーが離されたかどうかを追跡\n        this.keyProcessed = {}; // キーが処理済みかどうかを追跡\n        this.repeatDelay = 200; // キーリピートの遅延（ミリ秒）\n        this.repeatInterval = 100; // キーリピートの間隔（ミリ秒）\n        // キーマッピングを設定\n        this.keyActions = {\n            'ArrowLeft': _types__WEBPACK_IMPORTED_MODULE_0__.KeyAction.Left,\n            'ArrowRight': _types__WEBPACK_IMPORTED_MODULE_0__.KeyAction.Right,\n            'ArrowDown': _types__WEBPACK_IMPORTED_MODULE_0__.KeyAction.Down,\n            'ArrowUp': _types__WEBPACK_IMPORTED_MODULE_0__.KeyAction.Rotate,\n            'z': _types__WEBPACK_IMPORTED_MODULE_0__.KeyAction.Rotate,\n            'x': _types__WEBPACK_IMPORTED_MODULE_0__.KeyAction.Rotate\n        };\n        // キーイベントのリスナーを設定\n        window.addEventListener('keydown', function (e) { return _this.handleKeyDown(e); });\n        window.addEventListener('keyup', function (e) { return _this.handleKeyUp(e); });\n    }\n    // キーが押されたときの処理\n    InputHandler.prototype.handleKeyDown = function (e) {\n        var key = e.key;\n        // ゲームに関係するキーの場合、デフォルトの動作を防止\n        if (this.keyActions[key] !== undefined || key === ' ') {\n            e.preventDefault();\n            // キーの状態を更新\n            if (!this.keyState[key]) {\n                this.keyState[key] = true;\n                this.lastKeyPressTime[key] = Date.now();\n                this.keyProcessed[key] = false; // 新しく押されたキーは未処理\n            }\n        }\n    };\n    // キーが離されたときの処理\n    InputHandler.prototype.handleKeyUp = function (e) {\n        var key = e.key;\n        // キーの状態を更新\n        if (this.keyActions[key] !== undefined || key === ' ') {\n            this.keyState[key] = false;\n            delete this.lastKeyPressTime[key];\n            this.keyReleased[key] = true; // キーが離されたことを記録\n            delete this.keyProcessed[key]; // キー処理状態をリセット\n        }\n    };\n    // 指定したアクションのキーが押されているかどうかを確認\n    InputHandler.prototype.isActionPressed = function (action) {\n        for (var key in this.keyActions) {\n            if (this.keyActions[key] === action && this.keyState[key]) {\n                return true;\n            }\n        }\n        return false;\n    };\n    // 指定したアクションのキーが押されたかどうかを確認（キーリピート対応）\n    InputHandler.prototype.isActionTriggered = function (action) {\n        var now = Date.now();\n        for (var key in this.keyActions) {\n            if (this.keyActions[key] === action && this.keyState[key]) {\n                var lastPress = this.lastKeyPressTime[key] || 0;\n                var elapsed = now - lastPress;\n                // 初回押下時またはリピート間隔を超えた場合\n                if (elapsed < this.repeatDelay ||\n                    (elapsed >= this.repeatDelay && (elapsed - this.repeatDelay) % this.repeatInterval < 20)) {\n                    // 次回のチェックのために時間を更新（ただし初回は更新しない）\n                    if (elapsed >= this.repeatDelay) {\n                        this.lastKeyPressTime[key] = now - (elapsed % this.repeatInterval);\n                    }\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    // スペースキーが押されたかどうかを確認\n    InputHandler.prototype.isSpacePressed = function () {\n        return this.keyState[' '] || false;\n    };\n    // スペースキーが押されたかどうかを確認（一度だけ）\n    InputHandler.prototype.isSpaceTriggered = function () {\n        if (this.keyState[' ']) {\n            this.keyState[' '] = false;\n            return true;\n        }\n        return false;\n    };\n    // キーが離されたときに一度だけ発生するアクションを検出\n    InputHandler.prototype.isActionReleased = function (action) {\n        for (var key in this.keyActions) {\n            if (this.keyActions[key] === action && this.keyReleased[key]) {\n                this.keyReleased[key] = false; // 検出後はリセット\n                return true;\n            }\n        }\n        return false;\n    };\n    // キーが押されたときに一度だけ発生するアクション（キーを離すまで再度発生しない）\n    InputHandler.prototype.isActionTriggeredOnce = function (action) {\n        for (var key in this.keyActions) {\n            if (this.keyActions[key] === action && this.keyState[key] && !this.keyProcessed[key]) {\n                this.keyProcessed[key] = true; // 処理済みとしてマーク\n                return true;\n            }\n        }\n        return false;\n    };\n    // すべてのキー状態をリセット\n    InputHandler.prototype.reset = function () {\n        this.keyState = {};\n        this.lastKeyPressTime = {};\n        this.keyReleased = {};\n        this.keyProcessed = {};\n    };\n    return InputHandler;\n}());\n\n\n\n//# sourceURL=webpack://puyo-puyo-ts/./src/inputHandler.ts?");

/***/ }),

/***/ "./src/puyoGroup.ts":
/*!**************************!*\
  !*** ./src/puyoGroup.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PuyoGroupManager: () => (/* binding */ PuyoGroupManager)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"./src/types.ts\");\n\nvar PuyoGroupManager = /** @class */ (function () {\n    function PuyoGroupManager(config) {\n        this.config = config;\n    }\n    // 新しいぷよグループを生成\n    PuyoGroupManager.prototype.createPuyoGroup = function () {\n        // ボードの中央上部に配置\n        var centerX = Math.floor(this.config.boardWidth / 2);\n        // ランダムな色を生成\n        var colors = [\n            _types__WEBPACK_IMPORTED_MODULE_0__.PuyoColor.Red,\n            _types__WEBPACK_IMPORTED_MODULE_0__.PuyoColor.Green,\n            _types__WEBPACK_IMPORTED_MODULE_0__.PuyoColor.Blue,\n            _types__WEBPACK_IMPORTED_MODULE_0__.PuyoColor.Yellow,\n            _types__WEBPACK_IMPORTED_MODULE_0__.PuyoColor.Purple\n        ];\n        // 3つのぷよを生成（縦に並べる）\n        var puyos = [\n            {\n                color: this.getRandomColor(colors),\n                x: centerX,\n                y: 0\n            },\n            {\n                color: this.getRandomColor(colors),\n                x: centerX,\n                y: 1\n            },\n            {\n                color: this.getRandomColor(colors),\n                x: centerX,\n                y: 2\n            }\n        ];\n        return {\n            puyos: puyos,\n            rotation: 0\n        };\n    };\n    // ランダムな色を取得\n    PuyoGroupManager.prototype.getRandomColor = function (colors) {\n        var index = Math.floor(Math.random() * colors.length);\n        return colors[index];\n    };\n    // ぷよグループを左に移動\n    PuyoGroupManager.prototype.moveLeft = function (group, board) {\n        // 移動先の位置を確認\n        for (var _i = 0, _a = group.puyos; _i < _a.length; _i++) {\n            var puyo = _a[_i];\n            if (!board.isValidPosition(puyo.x - 1, puyo.y) ||\n                (!board.isPositionEmpty(puyo.x - 1, puyo.y) &&\n                    !this.isPuyoInGroup(group, puyo.x - 1, puyo.y))) {\n                return false; // 移動できない\n            }\n        }\n        // 移動\n        for (var _b = 0, _c = group.puyos; _b < _c.length; _b++) {\n            var puyo = _c[_b];\n            puyo.x -= 1;\n        }\n        return true;\n    };\n    // ぷよグループを右に移動\n    PuyoGroupManager.prototype.moveRight = function (group, board) {\n        // 移動先の位置を確認\n        for (var _i = 0, _a = group.puyos; _i < _a.length; _i++) {\n            var puyo = _a[_i];\n            if (!board.isValidPosition(puyo.x + 1, puyo.y) ||\n                (!board.isPositionEmpty(puyo.x + 1, puyo.y) &&\n                    !this.isPuyoInGroup(group, puyo.x + 1, puyo.y))) {\n                return false; // 移動できない\n            }\n        }\n        // 移動\n        for (var _b = 0, _c = group.puyos; _b < _c.length; _b++) {\n            var puyo = _c[_b];\n            puyo.x += 1;\n        }\n        return true;\n    };\n    // ぷよグループを下に移動\n    PuyoGroupManager.prototype.moveDown = function (group, board) {\n        // 移動先の位置を確認\n        for (var _i = 0, _a = group.puyos; _i < _a.length; _i++) {\n            var puyo = _a[_i];\n            if (!board.isValidPosition(puyo.x, puyo.y + 1) ||\n                (!board.isPositionEmpty(puyo.x, puyo.y + 1) &&\n                    !this.isPuyoInGroup(group, puyo.x, puyo.y + 1))) {\n                return false; // 移動できない\n            }\n        }\n        // 移動\n        for (var _b = 0, _c = group.puyos; _b < _c.length; _b++) {\n            var puyo = _c[_b];\n            puyo.y += 1;\n        }\n        return true;\n    };\n    // ぷよグループを回転\n    PuyoGroupManager.prototype.rotate = function (group, board) {\n        // 回転の中心となるぷよ（真ん中のぷよ）\n        var centerPuyo = group.puyos[1];\n        // 新しい位置を計算\n        var newPositions = [];\n        for (var i = 0; i < group.puyos.length; i++) {\n            if (i === 1) {\n                // 中心ぷよは移動しない\n                newPositions.push({ x: centerPuyo.x, y: centerPuyo.y });\n            }\n            else {\n                // 中心ぷよを基準に回転\n                var dx = group.puyos[i].x - centerPuyo.x;\n                var dy = group.puyos[i].y - centerPuyo.y;\n                // 時計回りに90度回転\n                var newX = centerPuyo.x - dy;\n                var newY = centerPuyo.y + dx;\n                newPositions.push({ x: newX, y: newY });\n            }\n        }\n        // 回転後の位置が壁と重なる場合の調整（押し出し処理）\n        var offsetX = 0;\n        var needsAdjustment = false;\n        // 左右の壁に対する調整\n        for (var _i = 0, newPositions_1 = newPositions; _i < newPositions_1.length; _i++) {\n            var pos = newPositions_1[_i];\n            // 左の壁\n            if (pos.x < 0) {\n                var requiredOffset = -pos.x;\n                if (requiredOffset > offsetX) {\n                    offsetX = requiredOffset;\n                    needsAdjustment = true;\n                }\n            }\n            // 右の壁\n            else if (pos.x >= this.config.boardWidth) {\n                var requiredOffset = this.config.boardWidth - 1 - pos.x;\n                if (requiredOffset < offsetX) {\n                    offsetX = requiredOffset;\n                    needsAdjustment = true;\n                }\n            }\n        }\n        // 位置を調整\n        if (needsAdjustment) {\n            for (var i = 0; i < newPositions.length; i++) {\n                newPositions[i].x += offsetX;\n            }\n        }\n        // 調整後の位置が他のぷよと重なるかどうかを確認\n        for (var i = 0; i < newPositions.length; i++) {\n            var _a = newPositions[i], x = _a.x, y = _a.y;\n            if (!board.isValidPosition(x, y) ||\n                (!board.isPositionEmpty(x, y) &&\n                    !this.isPuyoInGroup(group, x, y))) {\n                return false; // 回転できない\n            }\n        }\n        // 回転\n        for (var i = 0; i < group.puyos.length; i++) {\n            group.puyos[i].x = newPositions[i].x;\n            group.puyos[i].y = newPositions[i].y;\n        }\n        // 回転状態を更新\n        group.rotation = (group.rotation + 1) % 4;\n        return true;\n    };\n    // 指定した位置にグループ内のぷよがあるかどうかを確認\n    PuyoGroupManager.prototype.isPuyoInGroup = function (group, x, y) {\n        return group.puyos.some(function (puyo) { return puyo.x === x && puyo.y === y; });\n    };\n    // ぷよグループをボードに固定\n    PuyoGroupManager.prototype.placePuyoGroupOnBoard = function (group, board) {\n        for (var _i = 0, _a = group.puyos; _i < _a.length; _i++) {\n            var puyo = _a[_i];\n            board.setPuyo(puyo.x, puyo.y, puyo.color);\n        }\n    };\n    // ぷよグループが配置可能かどうかを確認\n    PuyoGroupManager.prototype.canPlacePuyoGroup = function (group, board) {\n        for (var _i = 0, _a = group.puyos; _i < _a.length; _i++) {\n            var puyo = _a[_i];\n            if (!board.isValidPosition(puyo.x, puyo.y) ||\n                !board.isPositionEmpty(puyo.x, puyo.y)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    return PuyoGroupManager;\n}());\n\n\n\n//# sourceURL=webpack://puyo-puyo-ts/./src/puyoGroup.ts?");

/***/ }),

/***/ "./src/renderer.ts":
/*!*************************!*\
  !*** ./src/renderer.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Renderer: () => (/* binding */ Renderer)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"./src/types.ts\");\n\nvar Renderer = /** @class */ (function () {\n    function Renderer(canvas, config) {\n        var _this = this;\n        this.canvas = canvas;\n        this.ctx = canvas.getContext('2d');\n        this.config = config;\n        // キャンバスのサイズを設定\n        this.resizeCanvas();\n        // ウィンドウのリサイズイベントを監視\n        window.addEventListener('resize', function () { return _this.resizeCanvas(); });\n    }\n    // キャンバスのサイズをウィンドウに合わせて調整\n    Renderer.prototype.resizeCanvas = function () {\n        this.canvas.width = window.innerWidth;\n        this.canvas.height = window.innerHeight;\n    };\n    // ゲーム状態を描画\n    Renderer.prototype.render = function (gameState) {\n        // キャンバスをクリア\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        // ゲームボードの位置を計算（中央に配置）\n        var boardWidth = this.config.boardWidth * this.config.puyoSize;\n        var boardHeight = this.config.boardHeight * this.config.puyoSize;\n        var boardX = (this.canvas.width - boardWidth) / 2;\n        var boardY = (this.canvas.height - boardHeight) / 2;\n        // ゲームボードの背景を描画\n        this.ctx.fillStyle = '#000000';\n        this.ctx.fillRect(boardX, boardY, boardWidth, boardHeight);\n        // ボード上のぷよを描画\n        for (var y = 0; y < this.config.boardHeight; y++) {\n            for (var x = 0; x < this.config.boardWidth; x++) {\n                var color = gameState.board[y][x];\n                if (color !== _types__WEBPACK_IMPORTED_MODULE_0__.PuyoColor.None) {\n                    this.drawPuyo(boardX + x * this.config.puyoSize, boardY + y * this.config.puyoSize, color);\n                }\n            }\n        }\n        // 現在操作中のぷよグループを描画\n        if (gameState.currentGroup) {\n            for (var _i = 0, _a = gameState.currentGroup.puyos; _i < _a.length; _i++) {\n                var puyo = _a[_i];\n                this.drawPuyo(boardX + puyo.x * this.config.puyoSize, boardY + puyo.y * this.config.puyoSize, puyo.color);\n            }\n        }\n        // 次のぷよグループを描画（右上に表示）\n        if (gameState.nextGroup) {\n            var nextGroupX = boardX + boardWidth + 20;\n            var nextGroupY = boardY;\n            // 「次のぷよ」というテキストを表示\n            this.ctx.fillStyle = '#FFFFFF';\n            this.ctx.font = '20px Arial';\n            this.ctx.fillText('次のぷよ', nextGroupX, nextGroupY - 10);\n            // 背景を描画\n            this.ctx.fillStyle = '#000000';\n            this.ctx.fillRect(nextGroupX, nextGroupY, this.config.puyoSize * 3, this.config.puyoSize * 3);\n            // 次のぷよグループを描画\n            for (var i = 0; i < gameState.nextGroup.puyos.length; i++) {\n                var puyo = gameState.nextGroup.puyos[i];\n                this.drawPuyo(nextGroupX + this.config.puyoSize, nextGroupY + i * this.config.puyoSize, puyo.color);\n            }\n            // 操作説明を表示\n            this.ctx.fillStyle = '#000';\n            this.ctx.font = '14px Arial';\n            var instructionY = nextGroupY + this.config.puyoSize * 3 + 20;\n            this.ctx.fillText('【操作方法】', nextGroupX, instructionY);\n            this.ctx.fillText('← →：左右移動', nextGroupX, instructionY + 20);\n            this.ctx.fillText('↓：早く落とす', nextGroupX, instructionY + 40);\n            this.ctx.fillText('↑/Z/X：回転', nextGroupX, instructionY + 60);\n            this.ctx.fillText('Space：リスタート', nextGroupX, instructionY + 80);\n        }\n        // スコアを描画（左上に表示）\n        this.ctx.fillStyle = '#000';\n        this.ctx.font = '24px Arial';\n        this.ctx.fillText(\"\\u30B9\\u30B3\\u30A2: \".concat(gameState.score), boardX, boardY - 20);\n        // ゲームオーバー時のメッセージを表示\n        if (gameState.gameOver) {\n            this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n            this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n            this.ctx.fillStyle = '#FFFFFF';\n            this.ctx.font = '48px Arial';\n            this.ctx.textAlign = 'center';\n            this.ctx.fillText('ゲームオーバー', this.canvas.width / 2, this.canvas.height / 2);\n            this.ctx.font = '24px Arial';\n            this.ctx.fillText(\"\\u6700\\u7D42\\u30B9\\u30B3\\u30A2: \".concat(gameState.score), this.canvas.width / 2, this.canvas.height / 2 + 50);\n            this.ctx.font = '20px Arial';\n            this.ctx.fillText('リスタートするにはスペースキーを押してください', this.canvas.width / 2, this.canvas.height / 2 + 100);\n            this.ctx.textAlign = 'left';\n        }\n    };\n    // 1つのぷよを描画\n    Renderer.prototype.drawPuyo = function (x, y, color) {\n        var radius = this.config.puyoSize / 2;\n        // ぷよの本体（円）を描画\n        this.ctx.fillStyle = (0,_types__WEBPACK_IMPORTED_MODULE_0__.getPuyoColorRGB)(color);\n        this.ctx.beginPath();\n        this.ctx.arc(x + radius, y + radius, radius - 2, 0, Math.PI * 2);\n        this.ctx.fill();\n        // ハイライト（光の反射）を描画\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n        this.ctx.beginPath();\n        this.ctx.arc(x + radius - radius / 3, y + radius - radius / 3, radius / 4, 0, Math.PI * 2);\n        this.ctx.fill();\n    };\n    return Renderer;\n}());\n\n\n\n//# sourceURL=webpack://puyo-puyo-ts/./src/renderer.ts?");

/***/ }),

/***/ "./src/types.ts":
/*!**********************!*\
  !*** ./src/types.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyAction: () => (/* binding */ KeyAction),\n/* harmony export */   PuyoColor: () => (/* binding */ PuyoColor),\n/* harmony export */   getPuyoColorRGB: () => (/* binding */ getPuyoColorRGB)\n/* harmony export */ });\n// ぷよの色を表す列挙型\nvar PuyoColor;\n(function (PuyoColor) {\n    PuyoColor[PuyoColor[\"Red\"] = 0] = \"Red\";\n    PuyoColor[PuyoColor[\"Green\"] = 1] = \"Green\";\n    PuyoColor[PuyoColor[\"Blue\"] = 2] = \"Blue\";\n    PuyoColor[PuyoColor[\"Yellow\"] = 3] = \"Yellow\";\n    PuyoColor[PuyoColor[\"Purple\"] = 4] = \"Purple\";\n    PuyoColor[PuyoColor[\"None\"] = -1] = \"None\";\n})(PuyoColor || (PuyoColor = {}));\n// キー入力を表す型\nvar KeyAction;\n(function (KeyAction) {\n    KeyAction[KeyAction[\"Left\"] = 0] = \"Left\";\n    KeyAction[KeyAction[\"Right\"] = 1] = \"Right\";\n    KeyAction[KeyAction[\"Down\"] = 2] = \"Down\";\n    KeyAction[KeyAction[\"Rotate\"] = 3] = \"Rotate\";\n})(KeyAction || (KeyAction = {}));\n// 色に対応するRGB値を取得する関数\nfunction getPuyoColorRGB(color) {\n    switch (color) {\n        case PuyoColor.Red:\n            return '#FF0000';\n        case PuyoColor.Green:\n            return '#00FF00';\n        case PuyoColor.Blue:\n            return '#0000FF';\n        case PuyoColor.Yellow:\n            return '#FFFF00';\n        case PuyoColor.Purple:\n            return '#800080';\n        default:\n            return 'transparent';\n    }\n}\n\n\n//# sourceURL=webpack://puyo-puyo-ts/./src/types.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;